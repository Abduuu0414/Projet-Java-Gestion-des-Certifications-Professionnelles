/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Certification;
import beans.InscriptionCertification;
import services.InscriptionCertificationService;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

import javax.swing.*;
import java.util.List;

/**
 *
 * @author admin
 */
public class CertificationChartForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form InscriptionForm
     */
    private InscriptionCertificationService ics;
    
    public CertificationChartForm() {
        initComponents();
        this.setTitle("Graphe : Nombre d'inscrits par certification");
        setFrameIcon(new ImageIcon(getClass().getResource("/image/professional-certification-icon-logo.png")));
        ics = new InscriptionCertificationService();
        displayChart();
    }
    
    private void displayChart() {
        DefaultCategoryDataset dataset = createDataset();
        JFreeChart barChart = ChartFactory.createBarChart(
                "Nombre d'inscrits par certification",
                "Certification",
                "Nombre d'inscrits",
                dataset,
                PlotOrientation.VERTICAL,
                true, true, false);

        // Obtenir le renderer du graphique
        org.jfree.chart.plot.CategoryPlot plot = barChart.getCategoryPlot();
        org.jfree.chart.renderer.category.BarRenderer renderer = (org.jfree.chart.renderer.category.BarRenderer) plot.getRenderer();

        // Définir la couleur des barres
        java.awt.Color customColor = new java.awt.Color(48, 48, 119);
        renderer.setSeriesPaint(0, customColor); // Appliquer la couleur à la série 0

        // Crée un ChartPanel avec le graphique
        ChartPanel chart = new ChartPanel(barChart);
        chart.setPreferredSize(new java.awt.Dimension(ChartPanel.getWidth(), ChartPanel.getHeight()));

        // Ajoute le ChartPanel au JPanel existant
        ChartPanel.removeAll(); // Supprime tout contenu précédent
        ChartPanel.add(chart, java.awt.BorderLayout.CENTER); // Ajoute le graphique au centre
        ChartPanel.revalidate(); // Rafraîchit le JPanel
        ChartPanel.repaint(); // Redessine le JPanel
}

    private DefaultCategoryDataset createDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        List<InscriptionCertification> inscriptions = ics.findAll();

        // Parcourir les inscriptions et compter le nombre d'inscrits par certification
        for (InscriptionCertification ic : inscriptions) {
            Certification cert = ic.getCertification();
            String certName = cert.getNom();
            int count = getCountForCertification(inscriptions, certName);
            dataset.addValue(count, "Inscrits", certName);
        }

        return dataset;
    }

    private int getCountForCertification(List<InscriptionCertification> inscriptions, String certName) {
        int count = 0;
        for (InscriptionCertification ic : inscriptions) {
            if (ic.getCertification().getNom().equals(certName)) {
                count++;
            }
        }
        return count;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChartPanel = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Gestion et Affichage des Inscriptions");
        setAlignmentX(100.0F);
        setAlignmentY(100.0F);
        setPreferredSize(new java.awt.Dimension(800, 600));

        ChartPanel.setBackground(new java.awt.Color(204, 204, 255));
        ChartPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ChartPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChartPanel;
    // End of variables declaration//GEN-END:variables
}
